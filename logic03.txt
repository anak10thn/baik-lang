MVCPARSING MVClex_double( MVC_LEX_T mvc_lex, MVC_S_ADDR mvc_pg )
{
  char c; 
  int  i = 0;

  MVCPARSING par;

  memset(&par, '\0', sizeof(par));

  memset( &lex, 0, sizeof(BAIK_LEX) );

  do{
    c = mvc_pg.source[mvc_pg.pt++];

    // printf("%d %d \n", mvc_pg.pt, mvc_pg.back_pt);

    if( c == '\0' ) {
        break;
    }

    if( c == '\r' || c == '\n' || c == '\b' || c == '\f' || c == '\t' ) {
        break;
    }

    if( i > (MAX_STRING_LEN - 1) )
      Error("melebihi kapasitas MAX_STRING_LEN");
    
    mvc_lex.detail.string[i++] = (char)c;

  }while( !isspace( c ) && c != '\0' &&  c != ',' &&  c != '(' &&  c != ')'
           &&  c != '{' &&  c != '}' &&  c != ';' );

  if(mvc_lex.detail.string[i-1] == ',' ||
     mvc_lex.detail.string[i-1] == '(' ||
     mvc_lex.detail.string[i-1] == ')' ||
     mvc_lex.detail.string[i-1] == '{' ||
     mvc_lex.detail.string[i-1] == '}' ||
     mvc_lex.detail.string[i-1] == ';' ) {

       mvc_lex.detail.string[i-1] = '\0';
  } 

  mvc_pg.pt--;
  
  mvc_lex.detail.string[i] = '\0';

  /* printf("double str %s \n", mvc_lex.detail.string); */

  mvc_lex.detail.dblnum = strtodbl(mvc_lex.detail.string);

  /* printf("double %f \n", mvc_lex.detail.dblnum); */

  mvc_lex.type = TYPE_DBL;

  par.c = c;
  par.mvc_pg  = mvc_pg;
  par.mvc_lex = mvc_lex;

  return par;
}

// =============================================================================
// Function for Array
// =============================================================================
MVCPARSING MVClex_array( MVC_LEX_T mvc_lex, MVC_S_ADDR mvc_pg )
{
  char allarray[MAX_STRING_LEN];
  char c; 
  int  i = 0;
  int  pp = 0;

  MVCPARSING par;

  memset(&par, '\0', sizeof(par));

  memset( allarray, '\0', sizeof(allarray) );

  do{
    c = mvc_pg.source[mvc_pg.pt++];

    /* printf("%d %d \n", mvc_pg.pt, mvc_pg.back_pt); */

    if( c == '\0' ) {
        break;
    }

    if( c == '\r' || c == '\n' || c == '\b' || c == '\f' || c == '\t' ) {
        break;
    }


    if( i > (MAX_STRING_LEN - 1) )
      Error("melebihi kapasitas MAX_STRING_LEN");
    
    mvc_lex.detail.array_str[i++] = (char)c;

    pp = i;

    //printf("lex i-2 : %c  ,  ", mvc_lex.detail.array_str[pp-2]);
    //printf("lex i-1 : %c  ,  ", mvc_lex.detail.array_str[pp-1]);
    //printf("lex i : %c\n", mvc_lex.detail.array_str[pp]);

  if(mvc_lex.detail.array_str[pp-2] == ']' && mvc_lex.detail.array_str[pp-1] == '+')
	  break;
  if(mvc_lex.detail.array_str[pp-2] == ']' && mvc_lex.detail.array_str[pp-1] == '-')
	  break;

  }while( !isspace( c ) && c != '=' && c != ',' && c != '\0' &&  c != '(' &&  c != ')'
          &&  c != '{' &&  c != '}' &&  c != ';'  
		  );



  if(mvc_lex.detail.array_str[i-1] == ',' ||
     mvc_lex.detail.array_str[i-1] == '(' ||
     mvc_lex.detail.array_str[i-1] == ')' ||
     mvc_lex.detail.array_str[i-1] == '=' ||
     mvc_lex.detail.array_str[i-1] == '{' ||
     mvc_lex.detail.array_str[i-1] == '}' ||
     mvc_lex.detail.array_str[i-1] == ';'  
	 ) {
       mvc_lex.detail.array_str[i-1] = '\0';
  } 

  if(mvc_lex.detail.array_str[pp-2] == ']' && mvc_lex.detail.array_str[pp-1] == '+') {
       mvc_lex.detail.array_str[i-1] = '\0';
  }

  if(mvc_lex.detail.array_str[pp-2] == ']' && mvc_lex.detail.array_str[pp-1] == '-') {
       mvc_lex.detail.array_str[i-1] = '\0';
  }

  mvc_pg.pt--;

  mvc_lex.detail.array_str[i] = '\0';
  strcpy(allarray, mvc_lex.detail.array_str);

  // printf("arr str %s \n", allarray);

  mvc_lex.type = TYPE_MVC_ARRAY;

  par.c = c;
  par.mvc_pg  = mvc_pg;
  par.mvc_lex = mvc_lex;

  return par;
}

// =============================================================================

int checkArray( MVC_S_ADDR mvc_pg )
{
  char c='\0';
  int  isArray = 0;
  int  i,n = 0;
  int  posKiri = 0, posKanan = 0;
  int  numKiri = 0, numKanan = 0;

  int  adaKurung = 0;

  /* printf("pg before %d\n", mvc_pg.pt); */

  //printf("inside checkArray: ");
  do{
    c = mvc_pg.source[mvc_pg.pt++];
    //printf("%c", c);

    n++;

    if(c == '[') {
      posKiri = mvc_pg.pt;
      numKiri++;
    } 
    else if(c == ']') {
      posKanan = mvc_pg.pt;
      numKanan++;
    }
    else if(c == '(') {
      adaKurung = 1;
	}

    if( c == '\r' || c == '\n' || c == '\b' || c == '\f' || c == '\t' ) {
        break;
    }

  }while( !isspace( c ) && c != '=' && c != ',' && c != '(' && c != '\0' );
  //printf("\n");

  if(numKiri == 1 && numKanan == 1 && posKiri < posKanan && adaKurung == 0) {
    isArray = 1;
  }

  //printf("isArry %d\n", isArray);

  for(i=0; i<n; i++)
    mvc_pg.pt--;

  /* printf("pg after %d\n", mvc_pg.pt); */

  return isArray;
}

int checkDummyArray( char buf[MAX_STRING_LEN] )
{
  char c='\0';
  int  pos = 0;
  int  isDummy = 0;
  int  n = 0;
  int  posKiri = 0, posKanan = 0;
  int  numKiri = 0, numKanan = 0;

  /* printf("pg before %d\n", mvc_pg.pt); */

  do{
    c = buf[pos++];
    n++;

    if(c == '[') {
      posKiri = pos;
      numKiri++;
    } 
    else if(c == ']') {
      posKanan = pos;
      numKanan++;
    }

    if( c == '\r' || c == '\n' || c == '\b' || c == '\f' || c == '\t' ) {
        break;
    }

  }while( !isspace( c ) && c != '=' && c != '\0' );

  if(numKiri == 1 && numKanan == 1 && ((posKiri + 1) == posKanan) ) {
    isDummy = 1;
  }

  /* printf("isDummy %d\n", isArray); */

  return isDummy;
}


int checkFloat( MVC_S_ADDR mvc_pg )
{
  char c='\0';
  int  isFloat = 0;
  int  i = 0,n = 0;

  /* printf("pg before %d\n", mvc_pg.pt); */

  do{
    c = mvc_pg.source[mvc_pg.pt++];
    n++;

    if(c == '.')
      isFloat = 1;

  }while( !isspace( c ) && c != '\0' );

  for(i=0; i<n; i++)
    mvc_pg.pt--;

  /* printf("pg after %d\n", mvc_pg.pt); */

  return isFloat;
}

